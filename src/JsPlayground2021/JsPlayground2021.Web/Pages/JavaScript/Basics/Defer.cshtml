@page

@using JsPlayground2021.Web.Data.Enums
@using JsPlayground.Pages.Javascript.Basics

@{
    Layout = "~/Pages/Shared/_PageLayout.cshtml";
}

@{
    ViewData["Title"] = "Defer";
}

@section LibraryHeader {JavaScript}
@section PageName {Defer}

@section Menu
{
    <partial name="_MenuContainer" model="MenuType.Javascipt" />
}

<p>
    Sometimes you will have an issue where the page with throw an error because it is trying reference an element in a
    script file which has not been yet written to the page. Wrapping the code in a jQuery document ready function is one
    approach but if you don’t have jQuery in your project, you can tag the script file with a <code>defer</code> attribute:
</p>

<pre>
<code>
&lt;script src="javascripts/libraries/knockout-3.4.2.js">&lt;/script>
&lt;script src="javascripts/app.js" <mark>defer="defer"</mark>>&lt;/script>
</code>
</pre>

<p class="mb-5">This tells the browser not to load this script until the page has finished loading.</p>

<ul>
    <li>
        <a href="https://www.w3schools.com/tags/att_script_defer.asp" target="_blank">
            https://www.w3schools.com/tags/att_script_defer.asp
        </a>
    </li>
    <li>
        <a href="https://javascript.plainenglish.io/async-and-defer-the-complete-guide-to-loading-javascript-properly-ce6edce1e6b5" target="_blank">
            https://javascript.plainenglish.io/async-and-defer-the-complete-guide-to-loading-javascript-properly-ce6edce1e6b5
        </a>
    </li>
</ul>

@section Scripts
{
}
